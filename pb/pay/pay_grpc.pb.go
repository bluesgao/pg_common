// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: pay.proto

package pay

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PayService_GetPayToken_FullMethodName               = "/pay.PayService/GetPayToken"
	PayService_CreatePayOrder_FullMethodName            = "/pay.PayService/CreatePayOrder"
	PayService_CreateWithdrawOrder_FullMethodName       = "/pay.PayService/CreateWithdrawOrder"
	PayService_CreateDepositOrder_FullMethodName        = "/pay.PayService/CreateDepositOrder"
	PayService_CreateRefundOrder_FullMethodName         = "/pay.PayService/CreateRefundOrder"
	PayService_GetDepositOrderList_FullMethodName       = "/pay.PayService/GetDepositOrderList"
	PayService_GetWalletDepositOrderList_FullMethodName = "/pay.PayService/GetWalletDepositOrderList"
	PayService_GetDepositOrderDetail_FullMethodName     = "/pay.PayService/GetDepositOrderDetail"
	PayService_GetWithdrawOrderList_FullMethodName      = "/pay.PayService/GetWithdrawOrderList"
	PayService_GetWithdrawOrderDetail_FullMethodName    = "/pay.PayService/GetWithdrawOrderDetail"
)

// PayServiceClient is the client API for PayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PayServiceClient interface {
	// 获取支付token，用于防止重复提交
	GetPayToken(ctx context.Context, in *GetPayTokenReq, opts ...grpc.CallOption) (*GetPayTokenResp, error)
	// 钱包余额支付订单
	CreatePayOrder(ctx context.Context, in *CreatePayOrderReq, opts ...grpc.CallOption) (*CreatePayOrderResp, error)
	// 第三方提款订单
	CreateWithdrawOrder(ctx context.Context, in *CreateWithdrawOrderReq, opts ...grpc.CallOption) (*CreateWithdrawOrderResp, error)
	// 第三方充值订单
	CreateDepositOrder(ctx context.Context, in *CreateDepositOrderReq, opts ...grpc.CallOption) (*CreateDepositOrderResp, error)
	// 退款订单
	CreateRefundOrder(ctx context.Context, in *CreateRefundOrderReq, opts ...grpc.CallOption) (*CreateRefundOrderResp, error)
	// 查询充值订单列表(用户)
	GetDepositOrderList(ctx context.Context, in *GetDepositOrderListReq, opts ...grpc.CallOption) (*GetDepositOrderListResp, error)
	// 查询充值订单列表（钱包）
	GetWalletDepositOrderList(ctx context.Context, in *GetWalletDepositOrderListReq, opts ...grpc.CallOption) (*GetWalletDepositOrderListResp, error)
	// 查询充值订单详情
	GetDepositOrderDetail(ctx context.Context, in *GetDepositOrderDetailReq, opts ...grpc.CallOption) (*GetDepositOrderDetailResp, error)
	// 查询提款订单列表
	GetWithdrawOrderList(ctx context.Context, in *GetWithdrawOrderListReq, opts ...grpc.CallOption) (*GetWithdrawOrderListResp, error)
	// 查询提款订单详情
	GetWithdrawOrderDetail(ctx context.Context, in *GetWithdrawOrderDetailReq, opts ...grpc.CallOption) (*GetWithdrawOrderDetailResp, error)
}

type payServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayServiceClient(cc grpc.ClientConnInterface) PayServiceClient {
	return &payServiceClient{cc}
}

func (c *payServiceClient) GetPayToken(ctx context.Context, in *GetPayTokenReq, opts ...grpc.CallOption) (*GetPayTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPayTokenResp)
	err := c.cc.Invoke(ctx, PayService_GetPayToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) CreatePayOrder(ctx context.Context, in *CreatePayOrderReq, opts ...grpc.CallOption) (*CreatePayOrderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePayOrderResp)
	err := c.cc.Invoke(ctx, PayService_CreatePayOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) CreateWithdrawOrder(ctx context.Context, in *CreateWithdrawOrderReq, opts ...grpc.CallOption) (*CreateWithdrawOrderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWithdrawOrderResp)
	err := c.cc.Invoke(ctx, PayService_CreateWithdrawOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) CreateDepositOrder(ctx context.Context, in *CreateDepositOrderReq, opts ...grpc.CallOption) (*CreateDepositOrderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDepositOrderResp)
	err := c.cc.Invoke(ctx, PayService_CreateDepositOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) CreateRefundOrder(ctx context.Context, in *CreateRefundOrderReq, opts ...grpc.CallOption) (*CreateRefundOrderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRefundOrderResp)
	err := c.cc.Invoke(ctx, PayService_CreateRefundOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) GetDepositOrderList(ctx context.Context, in *GetDepositOrderListReq, opts ...grpc.CallOption) (*GetDepositOrderListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDepositOrderListResp)
	err := c.cc.Invoke(ctx, PayService_GetDepositOrderList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) GetWalletDepositOrderList(ctx context.Context, in *GetWalletDepositOrderListReq, opts ...grpc.CallOption) (*GetWalletDepositOrderListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalletDepositOrderListResp)
	err := c.cc.Invoke(ctx, PayService_GetWalletDepositOrderList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) GetDepositOrderDetail(ctx context.Context, in *GetDepositOrderDetailReq, opts ...grpc.CallOption) (*GetDepositOrderDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDepositOrderDetailResp)
	err := c.cc.Invoke(ctx, PayService_GetDepositOrderDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) GetWithdrawOrderList(ctx context.Context, in *GetWithdrawOrderListReq, opts ...grpc.CallOption) (*GetWithdrawOrderListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWithdrawOrderListResp)
	err := c.cc.Invoke(ctx, PayService_GetWithdrawOrderList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) GetWithdrawOrderDetail(ctx context.Context, in *GetWithdrawOrderDetailReq, opts ...grpc.CallOption) (*GetWithdrawOrderDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWithdrawOrderDetailResp)
	err := c.cc.Invoke(ctx, PayService_GetWithdrawOrderDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayServiceServer is the server API for PayService service.
// All implementations must embed UnimplementedPayServiceServer
// for forward compatibility.
type PayServiceServer interface {
	// 获取支付token，用于防止重复提交
	GetPayToken(context.Context, *GetPayTokenReq) (*GetPayTokenResp, error)
	// 钱包余额支付订单
	CreatePayOrder(context.Context, *CreatePayOrderReq) (*CreatePayOrderResp, error)
	// 第三方提款订单
	CreateWithdrawOrder(context.Context, *CreateWithdrawOrderReq) (*CreateWithdrawOrderResp, error)
	// 第三方充值订单
	CreateDepositOrder(context.Context, *CreateDepositOrderReq) (*CreateDepositOrderResp, error)
	// 退款订单
	CreateRefundOrder(context.Context, *CreateRefundOrderReq) (*CreateRefundOrderResp, error)
	// 查询充值订单列表(用户)
	GetDepositOrderList(context.Context, *GetDepositOrderListReq) (*GetDepositOrderListResp, error)
	// 查询充值订单列表（钱包）
	GetWalletDepositOrderList(context.Context, *GetWalletDepositOrderListReq) (*GetWalletDepositOrderListResp, error)
	// 查询充值订单详情
	GetDepositOrderDetail(context.Context, *GetDepositOrderDetailReq) (*GetDepositOrderDetailResp, error)
	// 查询提款订单列表
	GetWithdrawOrderList(context.Context, *GetWithdrawOrderListReq) (*GetWithdrawOrderListResp, error)
	// 查询提款订单详情
	GetWithdrawOrderDetail(context.Context, *GetWithdrawOrderDetailReq) (*GetWithdrawOrderDetailResp, error)
	mustEmbedUnimplementedPayServiceServer()
}

// UnimplementedPayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPayServiceServer struct{}

func (UnimplementedPayServiceServer) GetPayToken(context.Context, *GetPayTokenReq) (*GetPayTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayToken not implemented")
}
func (UnimplementedPayServiceServer) CreatePayOrder(context.Context, *CreatePayOrderReq) (*CreatePayOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayOrder not implemented")
}
func (UnimplementedPayServiceServer) CreateWithdrawOrder(context.Context, *CreateWithdrawOrderReq) (*CreateWithdrawOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithdrawOrder not implemented")
}
func (UnimplementedPayServiceServer) CreateDepositOrder(context.Context, *CreateDepositOrderReq) (*CreateDepositOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepositOrder not implemented")
}
func (UnimplementedPayServiceServer) CreateRefundOrder(context.Context, *CreateRefundOrderReq) (*CreateRefundOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRefundOrder not implemented")
}
func (UnimplementedPayServiceServer) GetDepositOrderList(context.Context, *GetDepositOrderListReq) (*GetDepositOrderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositOrderList not implemented")
}
func (UnimplementedPayServiceServer) GetWalletDepositOrderList(context.Context, *GetWalletDepositOrderListReq) (*GetWalletDepositOrderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletDepositOrderList not implemented")
}
func (UnimplementedPayServiceServer) GetDepositOrderDetail(context.Context, *GetDepositOrderDetailReq) (*GetDepositOrderDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositOrderDetail not implemented")
}
func (UnimplementedPayServiceServer) GetWithdrawOrderList(context.Context, *GetWithdrawOrderListReq) (*GetWithdrawOrderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawOrderList not implemented")
}
func (UnimplementedPayServiceServer) GetWithdrawOrderDetail(context.Context, *GetWithdrawOrderDetailReq) (*GetWithdrawOrderDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawOrderDetail not implemented")
}
func (UnimplementedPayServiceServer) mustEmbedUnimplementedPayServiceServer() {}
func (UnimplementedPayServiceServer) testEmbeddedByValue()                    {}

// UnsafePayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayServiceServer will
// result in compilation errors.
type UnsafePayServiceServer interface {
	mustEmbedUnimplementedPayServiceServer()
}

func RegisterPayServiceServer(s grpc.ServiceRegistrar, srv PayServiceServer) {
	// If the following call pancis, it indicates UnimplementedPayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PayService_ServiceDesc, srv)
}

func _PayService_GetPayToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).GetPayToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_GetPayToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).GetPayToken(ctx, req.(*GetPayTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_CreatePayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePayOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).CreatePayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_CreatePayOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).CreatePayOrder(ctx, req.(*CreatePayOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_CreateWithdrawOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWithdrawOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).CreateWithdrawOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_CreateWithdrawOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).CreateWithdrawOrder(ctx, req.(*CreateWithdrawOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_CreateDepositOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepositOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).CreateDepositOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_CreateDepositOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).CreateDepositOrder(ctx, req.(*CreateDepositOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_CreateRefundOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRefundOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).CreateRefundOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_CreateRefundOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).CreateRefundOrder(ctx, req.(*CreateRefundOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_GetDepositOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositOrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).GetDepositOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_GetDepositOrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).GetDepositOrderList(ctx, req.(*GetDepositOrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_GetWalletDepositOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletDepositOrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).GetWalletDepositOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_GetWalletDepositOrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).GetWalletDepositOrderList(ctx, req.(*GetWalletDepositOrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_GetDepositOrderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositOrderDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).GetDepositOrderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_GetDepositOrderDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).GetDepositOrderDetail(ctx, req.(*GetDepositOrderDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_GetWithdrawOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawOrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).GetWithdrawOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_GetWithdrawOrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).GetWithdrawOrderList(ctx, req.(*GetWithdrawOrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_GetWithdrawOrderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawOrderDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).GetWithdrawOrderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_GetWithdrawOrderDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).GetWithdrawOrderDetail(ctx, req.(*GetWithdrawOrderDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PayService_ServiceDesc is the grpc.ServiceDesc for PayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pay.PayService",
	HandlerType: (*PayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPayToken",
			Handler:    _PayService_GetPayToken_Handler,
		},
		{
			MethodName: "CreatePayOrder",
			Handler:    _PayService_CreatePayOrder_Handler,
		},
		{
			MethodName: "CreateWithdrawOrder",
			Handler:    _PayService_CreateWithdrawOrder_Handler,
		},
		{
			MethodName: "CreateDepositOrder",
			Handler:    _PayService_CreateDepositOrder_Handler,
		},
		{
			MethodName: "CreateRefundOrder",
			Handler:    _PayService_CreateRefundOrder_Handler,
		},
		{
			MethodName: "GetDepositOrderList",
			Handler:    _PayService_GetDepositOrderList_Handler,
		},
		{
			MethodName: "GetWalletDepositOrderList",
			Handler:    _PayService_GetWalletDepositOrderList_Handler,
		},
		{
			MethodName: "GetDepositOrderDetail",
			Handler:    _PayService_GetDepositOrderDetail_Handler,
		},
		{
			MethodName: "GetWithdrawOrderList",
			Handler:    _PayService_GetWithdrawOrderList_Handler,
		},
		{
			MethodName: "GetWithdrawOrderDetail",
			Handler:    _PayService_GetWithdrawOrderDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pay.proto",
}
