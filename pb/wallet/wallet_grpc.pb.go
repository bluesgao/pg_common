// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: wallet.proto

package wallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WalletService_CreateWallet_FullMethodName        = "/wallet.WalletService/CreateWallet"
	WalletService_GetWallet_FullMethodName           = "/wallet.WalletService/GetWallet"
	WalletService_GetWalletByWalletId_FullMethodName = "/wallet.WalletService/GetWalletByWalletId"
	WalletService_GetWalletList_FullMethodName       = "/wallet.WalletService/GetWalletList"
	WalletService_CloseWallet_FullMethodName         = "/wallet.WalletService/CloseWallet"
	WalletService_ActiveWallet_FullMethodName        = "/wallet.WalletService/ActiveWallet"
	WalletService_WalletWithdraw_FullMethodName      = "/wallet.WalletService/WalletWithdraw"
	WalletService_WalletDeposit_FullMethodName       = "/wallet.WalletService/WalletDeposit"
	WalletService_CreatePayee_FullMethodName         = "/wallet.WalletService/CreatePayee"
	WalletService_GetPayeeList_FullMethodName        = "/wallet.WalletService/GetPayeeList"
	WalletService_DeletePayee_FullMethodName         = "/wallet.WalletService/DeletePayee"
)

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletServiceClient interface {
	CreateWallet(ctx context.Context, in *CreateWalletReq, opts ...grpc.CallOption) (*CreateWalletResp, error)
	GetWallet(ctx context.Context, in *GetWalletReq, opts ...grpc.CallOption) (*GetWalletResp, error)
	GetWalletByWalletId(ctx context.Context, in *GetWalletByWalletIdReq, opts ...grpc.CallOption) (*GetWalletByWalletIdResp, error)
	GetWalletList(ctx context.Context, in *GetWalletListReq, opts ...grpc.CallOption) (*GetWalletListResp, error)
	CloseWallet(ctx context.Context, in *CloseWalletReq, opts ...grpc.CallOption) (*CloseWalletResp, error)
	ActiveWallet(ctx context.Context, in *ActiveWalletReq, opts ...grpc.CallOption) (*ActiveWalletResp, error)
	WalletWithdraw(ctx context.Context, in *WalletWithdrawReq, opts ...grpc.CallOption) (*WalletWithdrawResp, error)
	WalletDeposit(ctx context.Context, in *WalletDepositReq, opts ...grpc.CallOption) (*WalletDepositResp, error)
	// rpc Transfer(TransferReq) returns(TransferResp); // 转账
	// rpc Frozen(FrozenReq) returns(FrozenResp); // 冻结
	// rpc Unfrozen(UnfrozenReq) returns(UnfrozenResp);
	// rpc Refund(RefundReq) returns(RefundResp);
	// rpc Adjust(AdjustReq) returns(AdjustResp);
	CreatePayee(ctx context.Context, in *CreatePayeeReq, opts ...grpc.CallOption) (*CreatePayeeResp, error)
	GetPayeeList(ctx context.Context, in *GetPayeeListReq, opts ...grpc.CallOption) (*GetPayeeListResp, error)
	DeletePayee(ctx context.Context, in *DeletePayeeReq, opts ...grpc.CallOption) (*DeletePayeeResp, error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) CreateWallet(ctx context.Context, in *CreateWalletReq, opts ...grpc.CallOption) (*CreateWalletResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWalletResp)
	err := c.cc.Invoke(ctx, WalletService_CreateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetWallet(ctx context.Context, in *GetWalletReq, opts ...grpc.CallOption) (*GetWalletResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalletResp)
	err := c.cc.Invoke(ctx, WalletService_GetWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetWalletByWalletId(ctx context.Context, in *GetWalletByWalletIdReq, opts ...grpc.CallOption) (*GetWalletByWalletIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalletByWalletIdResp)
	err := c.cc.Invoke(ctx, WalletService_GetWalletByWalletId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetWalletList(ctx context.Context, in *GetWalletListReq, opts ...grpc.CallOption) (*GetWalletListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalletListResp)
	err := c.cc.Invoke(ctx, WalletService_GetWalletList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CloseWallet(ctx context.Context, in *CloseWalletReq, opts ...grpc.CallOption) (*CloseWalletResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseWalletResp)
	err := c.cc.Invoke(ctx, WalletService_CloseWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ActiveWallet(ctx context.Context, in *ActiveWalletReq, opts ...grpc.CallOption) (*ActiveWalletResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActiveWalletResp)
	err := c.cc.Invoke(ctx, WalletService_ActiveWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) WalletWithdraw(ctx context.Context, in *WalletWithdrawReq, opts ...grpc.CallOption) (*WalletWithdrawResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WalletWithdrawResp)
	err := c.cc.Invoke(ctx, WalletService_WalletWithdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) WalletDeposit(ctx context.Context, in *WalletDepositReq, opts ...grpc.CallOption) (*WalletDepositResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WalletDepositResp)
	err := c.cc.Invoke(ctx, WalletService_WalletDeposit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CreatePayee(ctx context.Context, in *CreatePayeeReq, opts ...grpc.CallOption) (*CreatePayeeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePayeeResp)
	err := c.cc.Invoke(ctx, WalletService_CreatePayee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetPayeeList(ctx context.Context, in *GetPayeeListReq, opts ...grpc.CallOption) (*GetPayeeListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPayeeListResp)
	err := c.cc.Invoke(ctx, WalletService_GetPayeeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) DeletePayee(ctx context.Context, in *DeletePayeeReq, opts ...grpc.CallOption) (*DeletePayeeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePayeeResp)
	err := c.cc.Invoke(ctx, WalletService_DeletePayee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServiceServer is the server API for WalletService service.
// All implementations must embed UnimplementedWalletServiceServer
// for forward compatibility.
type WalletServiceServer interface {
	CreateWallet(context.Context, *CreateWalletReq) (*CreateWalletResp, error)
	GetWallet(context.Context, *GetWalletReq) (*GetWalletResp, error)
	GetWalletByWalletId(context.Context, *GetWalletByWalletIdReq) (*GetWalletByWalletIdResp, error)
	GetWalletList(context.Context, *GetWalletListReq) (*GetWalletListResp, error)
	CloseWallet(context.Context, *CloseWalletReq) (*CloseWalletResp, error)
	ActiveWallet(context.Context, *ActiveWalletReq) (*ActiveWalletResp, error)
	WalletWithdraw(context.Context, *WalletWithdrawReq) (*WalletWithdrawResp, error)
	WalletDeposit(context.Context, *WalletDepositReq) (*WalletDepositResp, error)
	// rpc Transfer(TransferReq) returns(TransferResp); // 转账
	// rpc Frozen(FrozenReq) returns(FrozenResp); // 冻结
	// rpc Unfrozen(UnfrozenReq) returns(UnfrozenResp);
	// rpc Refund(RefundReq) returns(RefundResp);
	// rpc Adjust(AdjustReq) returns(AdjustResp);
	CreatePayee(context.Context, *CreatePayeeReq) (*CreatePayeeResp, error)
	GetPayeeList(context.Context, *GetPayeeListReq) (*GetPayeeListResp, error)
	DeletePayee(context.Context, *DeletePayeeReq) (*DeletePayeeResp, error)
	mustEmbedUnimplementedWalletServiceServer()
}

// UnimplementedWalletServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWalletServiceServer struct{}

func (UnimplementedWalletServiceServer) CreateWallet(context.Context, *CreateWalletReq) (*CreateWalletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedWalletServiceServer) GetWallet(context.Context, *GetWalletReq) (*GetWalletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallet not implemented")
}
func (UnimplementedWalletServiceServer) GetWalletByWalletId(context.Context, *GetWalletByWalletIdReq) (*GetWalletByWalletIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletByWalletId not implemented")
}
func (UnimplementedWalletServiceServer) GetWalletList(context.Context, *GetWalletListReq) (*GetWalletListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletList not implemented")
}
func (UnimplementedWalletServiceServer) CloseWallet(context.Context, *CloseWalletReq) (*CloseWalletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseWallet not implemented")
}
func (UnimplementedWalletServiceServer) ActiveWallet(context.Context, *ActiveWalletReq) (*ActiveWalletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveWallet not implemented")
}
func (UnimplementedWalletServiceServer) WalletWithdraw(context.Context, *WalletWithdrawReq) (*WalletWithdrawResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletWithdraw not implemented")
}
func (UnimplementedWalletServiceServer) WalletDeposit(context.Context, *WalletDepositReq) (*WalletDepositResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletDeposit not implemented")
}
func (UnimplementedWalletServiceServer) CreatePayee(context.Context, *CreatePayeeReq) (*CreatePayeeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayee not implemented")
}
func (UnimplementedWalletServiceServer) GetPayeeList(context.Context, *GetPayeeListReq) (*GetPayeeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayeeList not implemented")
}
func (UnimplementedWalletServiceServer) DeletePayee(context.Context, *DeletePayeeReq) (*DeletePayeeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePayee not implemented")
}
func (UnimplementedWalletServiceServer) mustEmbedUnimplementedWalletServiceServer() {}
func (UnimplementedWalletServiceServer) testEmbeddedByValue()                       {}

// UnsafeWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServiceServer will
// result in compilation errors.
type UnsafeWalletServiceServer interface {
	mustEmbedUnimplementedWalletServiceServer()
}

func RegisterWalletServiceServer(s grpc.ServiceRegistrar, srv WalletServiceServer) {
	// If the following call pancis, it indicates UnimplementedWalletServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WalletService_ServiceDesc, srv)
}

func _WalletService_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CreateWallet(ctx, req.(*CreateWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetWallet(ctx, req.(*GetWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetWalletByWalletId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletByWalletIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetWalletByWalletId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetWalletByWalletId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetWalletByWalletId(ctx, req.(*GetWalletByWalletIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetWalletList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetWalletList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetWalletList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetWalletList(ctx, req.(*GetWalletListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CloseWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CloseWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CloseWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CloseWallet(ctx, req.(*CloseWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ActiveWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiveWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ActiveWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_ActiveWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ActiveWallet(ctx, req.(*ActiveWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_WalletWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletWithdrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).WalletWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_WalletWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).WalletWithdraw(ctx, req.(*WalletWithdrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_WalletDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletDepositReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).WalletDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_WalletDeposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).WalletDeposit(ctx, req.(*WalletDepositReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CreatePayee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePayeeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CreatePayee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CreatePayee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CreatePayee(ctx, req.(*CreatePayeeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetPayeeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayeeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetPayeeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetPayeeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetPayeeList(ctx, req.(*GetPayeeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_DeletePayee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePayeeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).DeletePayee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_DeletePayee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).DeletePayee(ctx, req.(*DeletePayeeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletService_ServiceDesc is the grpc.ServiceDesc for WalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallet.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _WalletService_CreateWallet_Handler,
		},
		{
			MethodName: "GetWallet",
			Handler:    _WalletService_GetWallet_Handler,
		},
		{
			MethodName: "GetWalletByWalletId",
			Handler:    _WalletService_GetWalletByWalletId_Handler,
		},
		{
			MethodName: "GetWalletList",
			Handler:    _WalletService_GetWalletList_Handler,
		},
		{
			MethodName: "CloseWallet",
			Handler:    _WalletService_CloseWallet_Handler,
		},
		{
			MethodName: "ActiveWallet",
			Handler:    _WalletService_ActiveWallet_Handler,
		},
		{
			MethodName: "WalletWithdraw",
			Handler:    _WalletService_WalletWithdraw_Handler,
		},
		{
			MethodName: "WalletDeposit",
			Handler:    _WalletService_WalletDeposit_Handler,
		},
		{
			MethodName: "CreatePayee",
			Handler:    _WalletService_CreatePayee_Handler,
		},
		{
			MethodName: "GetPayeeList",
			Handler:    _WalletService_GetPayeeList_Handler,
		},
		{
			MethodName: "DeletePayee",
			Handler:    _WalletService_DeletePayee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet.proto",
}
