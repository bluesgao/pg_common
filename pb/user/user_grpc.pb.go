// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_CommonRegister_FullMethodName     = "/user.UserService/CommonRegister"
	UserService_SendPinCode_FullMethodName        = "/user.UserService/SendPinCode"
	UserService_UpdateUser_FullMethodName         = "/user.UserService/UpdateUser"
	UserService_UserList_FullMethodName           = "/user.UserService/UserList"
	UserService_GetUser_FullMethodName            = "/user.UserService/GetUser"
	UserService_Login_FullMethodName              = "/user.UserService/Login"
	UserService_Logout_FullMethodName             = "/user.UserService/Logout"
	UserService_FindLoginPwd_FullMethodName       = "/user.UserService/FindLoginPwd"
	UserService_GetPayPwd_FullMethodName          = "/user.UserService/GetPayPwd"
	UserService_UpdatePayPwd_FullMethodName       = "/user.UserService/UpdatePayPwd"
	UserService_SettingPayPwd_FullMethodName      = "/user.UserService/SettingPayPwd"
	UserService_UpdateLoginPwd_FullMethodName     = "/user.UserService/UpdateLoginPwd"
	UserService_SettingLoginPwd_FullMethodName    = "/user.UserService/SettingLoginPwd"
	UserService_VerifyAccessToken_FullMethodName  = "/user.UserService/VerifyAccessToken"
	UserService_RefreshAccessToken_FullMethodName = "/user.UserService/RefreshAccessToken"
	UserService_GetUserByUserId_FullMethodName    = "/user.UserService/GetUserByUserId"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 会员基本操作
type UserServiceClient interface {
	// 通用注册（账号、邮箱、手机号）
	CommonRegister(ctx context.Context, in *CommonRegisterReq, opts ...grpc.CallOption) (*CommonRegisterResp, error)
	// 发送验证码
	SendPinCode(ctx context.Context, in *SendPinCodeReq, opts ...grpc.CallOption) (*SendPinCodeResp, error)
	// 更新用户信息
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	// 获取用户列表
	UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
	// 获取用户信息
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error)
	// 登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 登出
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
	// 找回登录密码
	FindLoginPwd(ctx context.Context, in *FindLoginPwdReq, opts ...grpc.CallOption) (*FindLoginPwdResp, error)
	// 获取支付密码
	GetPayPwd(ctx context.Context, in *GetPayPwdReq, opts ...grpc.CallOption) (*GetPayPwdResp, error)
	// 更新支付密码
	UpdatePayPwd(ctx context.Context, in *UpdatePayPwdReq, opts ...grpc.CallOption) (*UpdatePayPwdResp, error)
	// 设置支付密码
	SettingPayPwd(ctx context.Context, in *SettingPayPwdReq, opts ...grpc.CallOption) (*SettingPayPwdResp, error)
	// 更新登录密码
	UpdateLoginPwd(ctx context.Context, in *UpdateLoginPwdReq, opts ...grpc.CallOption) (*UpdateLoginPwdResp, error)
	// 设置登录密码
	SettingLoginPwd(ctx context.Context, in *SettingLoginPwdReq, opts ...grpc.CallOption) (*SettingLoginPwdResp, error)
	// 验证访问令牌
	VerifyAccessToken(ctx context.Context, in *VerifyAccessTokenReq, opts ...grpc.CallOption) (*VerifyAccessTokenResp, error)
	// 刷新访问令牌
	RefreshAccessToken(ctx context.Context, in *RefreshAccessTokenReq, opts ...grpc.CallOption) (*RefreshAccessTokenResp, error)
	GetUserByUserId(ctx context.Context, in *GetUserByUserIdReq, opts ...grpc.CallOption) (*GetUserByUserIdResp, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CommonRegister(ctx context.Context, in *CommonRegisterReq, opts ...grpc.CallOption) (*CommonRegisterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonRegisterResp)
	err := c.cc.Invoke(ctx, UserService_CommonRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SendPinCode(ctx context.Context, in *SendPinCodeReq, opts ...grpc.CallOption) (*SendPinCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendPinCodeResp)
	err := c.cc.Invoke(ctx, UserService_SendPinCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, UserService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserListResp)
	err := c.cc.Invoke(ctx, UserService_UserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResp)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, UserService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResp)
	err := c.cc.Invoke(ctx, UserService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindLoginPwd(ctx context.Context, in *FindLoginPwdReq, opts ...grpc.CallOption) (*FindLoginPwdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindLoginPwdResp)
	err := c.cc.Invoke(ctx, UserService_FindLoginPwd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetPayPwd(ctx context.Context, in *GetPayPwdReq, opts ...grpc.CallOption) (*GetPayPwdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPayPwdResp)
	err := c.cc.Invoke(ctx, UserService_GetPayPwd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdatePayPwd(ctx context.Context, in *UpdatePayPwdReq, opts ...grpc.CallOption) (*UpdatePayPwdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePayPwdResp)
	err := c.cc.Invoke(ctx, UserService_UpdatePayPwd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SettingPayPwd(ctx context.Context, in *SettingPayPwdReq, opts ...grpc.CallOption) (*SettingPayPwdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SettingPayPwdResp)
	err := c.cc.Invoke(ctx, UserService_SettingPayPwd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateLoginPwd(ctx context.Context, in *UpdateLoginPwdReq, opts ...grpc.CallOption) (*UpdateLoginPwdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLoginPwdResp)
	err := c.cc.Invoke(ctx, UserService_UpdateLoginPwd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SettingLoginPwd(ctx context.Context, in *SettingLoginPwdReq, opts ...grpc.CallOption) (*SettingLoginPwdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SettingLoginPwdResp)
	err := c.cc.Invoke(ctx, UserService_SettingLoginPwd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyAccessToken(ctx context.Context, in *VerifyAccessTokenReq, opts ...grpc.CallOption) (*VerifyAccessTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyAccessTokenResp)
	err := c.cc.Invoke(ctx, UserService_VerifyAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RefreshAccessToken(ctx context.Context, in *RefreshAccessTokenReq, opts ...grpc.CallOption) (*RefreshAccessTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshAccessTokenResp)
	err := c.cc.Invoke(ctx, UserService_RefreshAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByUserId(ctx context.Context, in *GetUserByUserIdReq, opts ...grpc.CallOption) (*GetUserByUserIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByUserIdResp)
	err := c.cc.Invoke(ctx, UserService_GetUserByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
//
// 会员基本操作
type UserServiceServer interface {
	// 通用注册（账号、邮箱、手机号）
	CommonRegister(context.Context, *CommonRegisterReq) (*CommonRegisterResp, error)
	// 发送验证码
	SendPinCode(context.Context, *SendPinCodeReq) (*SendPinCodeResp, error)
	// 更新用户信息
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error)
	// 获取用户列表
	UserList(context.Context, *UserListReq) (*UserListResp, error)
	// 获取用户信息
	GetUser(context.Context, *GetUserReq) (*GetUserResp, error)
	// 登录
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// 登出
	Logout(context.Context, *LogoutReq) (*LogoutResp, error)
	// 找回登录密码
	FindLoginPwd(context.Context, *FindLoginPwdReq) (*FindLoginPwdResp, error)
	// 获取支付密码
	GetPayPwd(context.Context, *GetPayPwdReq) (*GetPayPwdResp, error)
	// 更新支付密码
	UpdatePayPwd(context.Context, *UpdatePayPwdReq) (*UpdatePayPwdResp, error)
	// 设置支付密码
	SettingPayPwd(context.Context, *SettingPayPwdReq) (*SettingPayPwdResp, error)
	// 更新登录密码
	UpdateLoginPwd(context.Context, *UpdateLoginPwdReq) (*UpdateLoginPwdResp, error)
	// 设置登录密码
	SettingLoginPwd(context.Context, *SettingLoginPwdReq) (*SettingLoginPwdResp, error)
	// 验证访问令牌
	VerifyAccessToken(context.Context, *VerifyAccessTokenReq) (*VerifyAccessTokenResp, error)
	// 刷新访问令牌
	RefreshAccessToken(context.Context, *RefreshAccessTokenReq) (*RefreshAccessTokenResp, error)
	GetUserByUserId(context.Context, *GetUserByUserIdReq) (*GetUserByUserIdResp, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) CommonRegister(context.Context, *CommonRegisterReq) (*CommonRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonRegister not implemented")
}
func (UnimplementedUserServiceServer) SendPinCode(context.Context, *SendPinCodeReq) (*SendPinCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPinCode not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) UserList(context.Context, *UserListReq) (*UserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserList not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserReq) (*GetUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceServer) Logout(context.Context, *LogoutReq) (*LogoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedUserServiceServer) FindLoginPwd(context.Context, *FindLoginPwdReq) (*FindLoginPwdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLoginPwd not implemented")
}
func (UnimplementedUserServiceServer) GetPayPwd(context.Context, *GetPayPwdReq) (*GetPayPwdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayPwd not implemented")
}
func (UnimplementedUserServiceServer) UpdatePayPwd(context.Context, *UpdatePayPwdReq) (*UpdatePayPwdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayPwd not implemented")
}
func (UnimplementedUserServiceServer) SettingPayPwd(context.Context, *SettingPayPwdReq) (*SettingPayPwdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingPayPwd not implemented")
}
func (UnimplementedUserServiceServer) UpdateLoginPwd(context.Context, *UpdateLoginPwdReq) (*UpdateLoginPwdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoginPwd not implemented")
}
func (UnimplementedUserServiceServer) SettingLoginPwd(context.Context, *SettingLoginPwdReq) (*SettingLoginPwdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingLoginPwd not implemented")
}
func (UnimplementedUserServiceServer) VerifyAccessToken(context.Context, *VerifyAccessTokenReq) (*VerifyAccessTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAccessToken not implemented")
}
func (UnimplementedUserServiceServer) RefreshAccessToken(context.Context, *RefreshAccessTokenReq) (*RefreshAccessTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshAccessToken not implemented")
}
func (UnimplementedUserServiceServer) GetUserByUserId(context.Context, *GetUserByUserIdReq) (*GetUserByUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUserId not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CommonRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CommonRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CommonRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CommonRegister(ctx, req.(*CommonRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SendPinCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPinCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SendPinCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SendPinCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SendPinCode(ctx, req.(*SendPinCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserList(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindLoginPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindLoginPwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindLoginPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FindLoginPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindLoginPwd(ctx, req.(*FindLoginPwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetPayPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayPwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetPayPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetPayPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetPayPwd(ctx, req.(*GetPayPwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdatePayPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePayPwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdatePayPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdatePayPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdatePayPwd(ctx, req.(*UpdatePayPwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SettingPayPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingPayPwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SettingPayPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SettingPayPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SettingPayPwd(ctx, req.(*SettingPayPwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateLoginPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoginPwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateLoginPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateLoginPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateLoginPwd(ctx, req.(*UpdateLoginPwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SettingLoginPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingLoginPwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SettingLoginPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SettingLoginPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SettingLoginPwd(ctx, req.(*SettingLoginPwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAccessTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyAccessToken(ctx, req.(*VerifyAccessTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RefreshAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshAccessTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RefreshAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RefreshAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RefreshAccessToken(ctx, req.(*RefreshAccessTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByUserId(ctx, req.(*GetUserByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommonRegister",
			Handler:    _UserService_CommonRegister_Handler,
		},
		{
			MethodName: "SendPinCode",
			Handler:    _UserService_SendPinCode_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "UserList",
			Handler:    _UserService_UserList_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _UserService_Logout_Handler,
		},
		{
			MethodName: "FindLoginPwd",
			Handler:    _UserService_FindLoginPwd_Handler,
		},
		{
			MethodName: "GetPayPwd",
			Handler:    _UserService_GetPayPwd_Handler,
		},
		{
			MethodName: "UpdatePayPwd",
			Handler:    _UserService_UpdatePayPwd_Handler,
		},
		{
			MethodName: "SettingPayPwd",
			Handler:    _UserService_SettingPayPwd_Handler,
		},
		{
			MethodName: "UpdateLoginPwd",
			Handler:    _UserService_UpdateLoginPwd_Handler,
		},
		{
			MethodName: "SettingLoginPwd",
			Handler:    _UserService_SettingLoginPwd_Handler,
		},
		{
			MethodName: "VerifyAccessToken",
			Handler:    _UserService_VerifyAccessToken_Handler,
		},
		{
			MethodName: "RefreshAccessToken",
			Handler:    _UserService_RefreshAccessToken_Handler,
		},
		{
			MethodName: "GetUserByUserId",
			Handler:    _UserService_GetUserByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
