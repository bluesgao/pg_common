// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: merchant.proto

package merchant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchantService_CreateMerchant_FullMethodName                 = "/merchant.MerchantService/CreateMerchant"
	MerchantService_UpdateMerchant_FullMethodName                 = "/merchant.MerchantService/UpdateMerchant"
	MerchantService_ActivateMerchant_FullMethodName               = "/merchant.MerchantService/ActivateMerchant"
	MerchantService_InactivateMerchant_FullMethodName             = "/merchant.MerchantService/InactivateMerchant"
	MerchantService_UpdateMerchantStatus_FullMethodName           = "/merchant.MerchantService/UpdateMerchantStatus"
	MerchantService_GetMerchant_FullMethodName                    = "/merchant.MerchantService/GetMerchant"
	MerchantService_ListMerchant_FullMethodName                   = "/merchant.MerchantService/ListMerchant"
	MerchantService_PageMerchant_FullMethodName                   = "/merchant.MerchantService/PageMerchant"
	MerchantService_GetMerchantByDomain_FullMethodName            = "/merchant.MerchantService/GetMerchantByDomain"
	MerchantService_CreateMerchantBaseSettings_FullMethodName     = "/merchant.MerchantService/CreateMerchantBaseSettings"
	MerchantService_GetMerchantBaseSettings_FullMethodName        = "/merchant.MerchantService/GetMerchantBaseSettings"
	MerchantService_CreatePlatformSettings_FullMethodName         = "/merchant.MerchantService/CreatePlatformSettings"
	MerchantService_UpdatePlatformSettings_FullMethodName         = "/merchant.MerchantService/UpdatePlatformSettings"
	MerchantService_ListPlatformSettings_FullMethodName           = "/merchant.MerchantService/ListPlatformSettings"
	MerchantService_CreateDomainSettings_FullMethodName           = "/merchant.MerchantService/CreateDomainSettings"
	MerchantService_UpdateDomainSettings_FullMethodName           = "/merchant.MerchantService/UpdateDomainSettings"
	MerchantService_ListDomainSettings_FullMethodName             = "/merchant.MerchantService/ListDomainSettings"
	MerchantService_GetDomainSettings_FullMethodName              = "/merchant.MerchantService/GetDomainSettings"
	MerchantService_CreateSecuritySettings_FullMethodName         = "/merchant.MerchantService/CreateSecuritySettings"
	MerchantService_UpdateSecuritySettings_FullMethodName         = "/merchant.MerchantService/UpdateSecuritySettings"
	MerchantService_ListSecuritySettings_FullMethodName           = "/merchant.MerchantService/ListSecuritySettings"
	MerchantService_CreateAccessSettings_FullMethodName           = "/merchant.MerchantService/CreateAccessSettings"
	MerchantService_UpdateAccessSettings_FullMethodName           = "/merchant.MerchantService/UpdateAccessSettings"
	MerchantService_ListAccessSettings_FullMethodName             = "/merchant.MerchantService/ListAccessSettings"
	MerchantService_CreateGameSettings_FullMethodName             = "/merchant.MerchantService/CreateGameSettings"
	MerchantService_UpdateGameSettings_FullMethodName             = "/merchant.MerchantService/UpdateGameSettings"
	MerchantService_ListGameSettings_FullMethodName               = "/merchant.MerchantService/ListGameSettings"
	MerchantService_CreateAgent_FullMethodName                    = "/merchant.MerchantService/CreateAgent"
	MerchantService_UpdateAgent_FullMethodName                    = "/merchant.MerchantService/UpdateAgent"
	MerchantService_ListAgent_FullMethodName                      = "/merchant.MerchantService/ListAgent"
	MerchantService_GetAgent_FullMethodName                       = "/merchant.MerchantService/GetAgent"
	MerchantService_GetAgentByInviteCode_FullMethodName           = "/merchant.MerchantService/GetAgentByInviteCode"
	MerchantService_CreateAgentDividend_FullMethodName            = "/merchant.MerchantService/CreateAgentDividend"
	MerchantService_UpdateAgentDividend_FullMethodName            = "/merchant.MerchantService/UpdateAgentDividend"
	MerchantService_ListAgentDividend_FullMethodName              = "/merchant.MerchantService/ListAgentDividend"
	MerchantService_GetAgentDividend_FullMethodName               = "/merchant.MerchantService/GetAgentDividend"
	MerchantService_CreateAgentSettlement_FullMethodName          = "/merchant.MerchantService/CreateAgentSettlement"
	MerchantService_UpdateAgentSettlement_FullMethodName          = "/merchant.MerchantService/UpdateAgentSettlement"
	MerchantService_ListAgentSettlement_FullMethodName            = "/merchant.MerchantService/ListAgentSettlement"
	MerchantService_GetAgentSettlement_FullMethodName             = "/merchant.MerchantService/GetAgentSettlement"
	MerchantService_AgentMemberMigration_FullMethodName           = "/merchant.MerchantService/AgentMemberMigration"
	MerchantService_ListAgentMemberMigrationRecord_FullMethodName = "/merchant.MerchantService/ListAgentMemberMigrationRecord"
)

// MerchantServiceClient is the client API for MerchantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantServiceClient interface {
	// 创建商户
	CreateMerchant(ctx context.Context, in *CreateMerchantReq, opts ...grpc.CallOption) (*MerchantResp, error)
	// 更新商户
	UpdateMerchant(ctx context.Context, in *UpdateMerchantReq, opts ...grpc.CallOption) (*MerchantResp, error)
	// 激活商户
	ActivateMerchant(ctx context.Context, in *ActivateMerchantReq, opts ...grpc.CallOption) (*ActivateMerchantResp, error)
	// 停用商户
	InactivateMerchant(ctx context.Context, in *InactivateMerchantReq, opts ...grpc.CallOption) (*InactivateMerchantResp, error)
	// 更新商户状态
	UpdateMerchantStatus(ctx context.Context, in *UpdateMerchantStatusReq, opts ...grpc.CallOption) (*MerchantResp, error)
	// 获取商户
	GetMerchant(ctx context.Context, in *GetMerchantReq, opts ...grpc.CallOption) (*MerchantResp, error)
	// 获取商户列表
	ListMerchant(ctx context.Context, in *MerchantListReq, opts ...grpc.CallOption) (*MerchantListResp, error)
	// 分页获取商户列表
	PageMerchant(ctx context.Context, in *PageMerchantReq, opts ...grpc.CallOption) (*MerchantListResp, error)
	GetMerchantByDomain(ctx context.Context, in *GetMerchantByDomainReq, opts ...grpc.CallOption) (*GetMerchantByDomainResp, error)
	// 创建商户基础设置
	CreateMerchantBaseSettings(ctx context.Context, in *CreateMerchantBaseSettingsReq, opts ...grpc.CallOption) (*CreateMerchantBaseSettingsResp, error)
	// 获取商户基础设置
	GetMerchantBaseSettings(ctx context.Context, in *GetMerchantBaseSettingsReq, opts ...grpc.CallOption) (*GetMerchantBaseSettingsResp, error)
	// 创建平台设置
	CreatePlatformSettings(ctx context.Context, in *CreatePlatformSettingsReq, opts ...grpc.CallOption) (*CreatePlatformSettingsResp, error)
	// 更新平台设置
	UpdatePlatformSettings(ctx context.Context, in *UpdatePlatformSettingsReq, opts ...grpc.CallOption) (*UpdatePlatformSettingsResp, error)
	// 获取平台设置列表
	ListPlatformSettings(ctx context.Context, in *ListPlatformSettingsReq, opts ...grpc.CallOption) (*ListPlatformSettingsResp, error)
	// 创建域名设置
	CreateDomainSettings(ctx context.Context, in *CreateDomainSettingsReq, opts ...grpc.CallOption) (*CreateDomainSettingsResp, error)
	// 更新域名设置
	UpdateDomainSettings(ctx context.Context, in *UpdateDomainSettingsReq, opts ...grpc.CallOption) (*UpdateDomainSettingsResp, error)
	// 获取域名设置列表
	ListDomainSettings(ctx context.Context, in *ListDomainSettingsReq, opts ...grpc.CallOption) (*ListDomainSettingsResp, error)
	GetDomainSettings(ctx context.Context, in *GetDomainSettingsReq, opts ...grpc.CallOption) (*GetDomainSettingsResp, error)
	// 创建安全设置
	CreateSecuritySettings(ctx context.Context, in *CreateSecuritySettingsReq, opts ...grpc.CallOption) (*CreateSecuritySettingsResp, error)
	// 更新安全设置
	UpdateSecuritySettings(ctx context.Context, in *UpdateSecuritySettingsReq, opts ...grpc.CallOption) (*UpdateSecuritySettingsResp, error)
	// 获取安全设置列表
	ListSecuritySettings(ctx context.Context, in *ListSecuritySettingsReq, opts ...grpc.CallOption) (*ListSecuritySettingsResp, error)
	// 创建访问控制
	CreateAccessSettings(ctx context.Context, in *CreateAccessSettingsReq, opts ...grpc.CallOption) (*CreateAccessSettingsResp, error)
	// 更新访问控制
	UpdateAccessSettings(ctx context.Context, in *UpdateAccessSettingsReq, opts ...grpc.CallOption) (*UpdateAccessSettingsResp, error)
	// 获取访问控制列表
	ListAccessSettings(ctx context.Context, in *ListAccessSettingsReq, opts ...grpc.CallOption) (*ListAccessSettingsResp, error)
	// 创建产品设置
	CreateGameSettings(ctx context.Context, in *CreateGameSettingsReq, opts ...grpc.CallOption) (*CreateGameSettingsResp, error)
	// 更新产品设置
	UpdateGameSettings(ctx context.Context, in *UpdateGameSettingsReq, opts ...grpc.CallOption) (*UpdateGameSettingsResp, error)
	// 获取产品设置列表
	ListGameSettings(ctx context.Context, in *ListGameSettingsReq, opts ...grpc.CallOption) (*ListGameSettingsResp, error)
	// 代理基本信息
	CreateAgent(ctx context.Context, in *CreateAgentReq, opts ...grpc.CallOption) (*CreateAgentResp, error)
	// 更新代理基本信息
	UpdateAgent(ctx context.Context, in *UpdateAgentReq, opts ...grpc.CallOption) (*UpdateAgentResp, error)
	// 获取代理列表
	ListAgent(ctx context.Context, in *ListAgentReq, opts ...grpc.CallOption) (*ListAgentResp, error)
	// 获取代理
	GetAgent(ctx context.Context, in *GetAgentReq, opts ...grpc.CallOption) (*GetAgentResp, error)
	// 获取代理邀请码
	GetAgentByInviteCode(ctx context.Context, in *GetAgentByInviteCodeReq, opts ...grpc.CallOption) (*GetAgentByInviteCodeResp, error)
	// 代理分红模式
	CreateAgentDividend(ctx context.Context, in *CreateAgentDividendReq, opts ...grpc.CallOption) (*CreateAgentDividendResp, error)
	// 更新代理分红模式
	UpdateAgentDividend(ctx context.Context, in *UpdateAgentDividendReq, opts ...grpc.CallOption) (*UpdateAgentDividendResp, error)
	// 获取代理分红模式列表
	ListAgentDividend(ctx context.Context, in *ListAgentDividendReq, opts ...grpc.CallOption) (*ListAgentDividendResp, error)
	// 获取代理分红模式
	GetAgentDividend(ctx context.Context, in *GetAgentDividendReq, opts ...grpc.CallOption) (*GetAgentDividendResp, error)
	// 代理结算模式
	CreateAgentSettlement(ctx context.Context, in *CreateAgentSettlementReq, opts ...grpc.CallOption) (*CreateAgentSettlementResp, error)
	// 更新代理结算模式
	UpdateAgentSettlement(ctx context.Context, in *UpdateAgentSettlementReq, opts ...grpc.CallOption) (*UpdateAgentSettlementResp, error)
	// 获取代理结算模式列表
	ListAgentSettlement(ctx context.Context, in *ListAgentSettlementReq, opts ...grpc.CallOption) (*ListAgentSettlementResp, error)
	// 获取代理结算模式
	GetAgentSettlement(ctx context.Context, in *GetAgentSettlementReq, opts ...grpc.CallOption) (*GetAgentSettlementResp, error)
	// 代理会员迁移
	AgentMemberMigration(ctx context.Context, in *MemberMigrationReq, opts ...grpc.CallOption) (*MemberMigrationResp, error)
	// 获取代理会员迁移记录列表
	ListAgentMemberMigrationRecord(ctx context.Context, in *MemberMigrationListReq, opts ...grpc.CallOption) (*MemberMigrationListResp, error)
}

type merchantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantServiceClient(cc grpc.ClientConnInterface) MerchantServiceClient {
	return &merchantServiceClient{cc}
}

func (c *merchantServiceClient) CreateMerchant(ctx context.Context, in *CreateMerchantReq, opts ...grpc.CallOption) (*MerchantResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantResp)
	err := c.cc.Invoke(ctx, MerchantService_CreateMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) UpdateMerchant(ctx context.Context, in *UpdateMerchantReq, opts ...grpc.CallOption) (*MerchantResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantResp)
	err := c.cc.Invoke(ctx, MerchantService_UpdateMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ActivateMerchant(ctx context.Context, in *ActivateMerchantReq, opts ...grpc.CallOption) (*ActivateMerchantResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivateMerchantResp)
	err := c.cc.Invoke(ctx, MerchantService_ActivateMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) InactivateMerchant(ctx context.Context, in *InactivateMerchantReq, opts ...grpc.CallOption) (*InactivateMerchantResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InactivateMerchantResp)
	err := c.cc.Invoke(ctx, MerchantService_InactivateMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) UpdateMerchantStatus(ctx context.Context, in *UpdateMerchantStatusReq, opts ...grpc.CallOption) (*MerchantResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantResp)
	err := c.cc.Invoke(ctx, MerchantService_UpdateMerchantStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMerchant(ctx context.Context, in *GetMerchantReq, opts ...grpc.CallOption) (*MerchantResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantResp)
	err := c.cc.Invoke(ctx, MerchantService_GetMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ListMerchant(ctx context.Context, in *MerchantListReq, opts ...grpc.CallOption) (*MerchantListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantListResp)
	err := c.cc.Invoke(ctx, MerchantService_ListMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) PageMerchant(ctx context.Context, in *PageMerchantReq, opts ...grpc.CallOption) (*MerchantListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerchantListResp)
	err := c.cc.Invoke(ctx, MerchantService_PageMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMerchantByDomain(ctx context.Context, in *GetMerchantByDomainReq, opts ...grpc.CallOption) (*GetMerchantByDomainResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMerchantByDomainResp)
	err := c.cc.Invoke(ctx, MerchantService_GetMerchantByDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) CreateMerchantBaseSettings(ctx context.Context, in *CreateMerchantBaseSettingsReq, opts ...grpc.CallOption) (*CreateMerchantBaseSettingsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMerchantBaseSettingsResp)
	err := c.cc.Invoke(ctx, MerchantService_CreateMerchantBaseSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMerchantBaseSettings(ctx context.Context, in *GetMerchantBaseSettingsReq, opts ...grpc.CallOption) (*GetMerchantBaseSettingsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMerchantBaseSettingsResp)
	err := c.cc.Invoke(ctx, MerchantService_GetMerchantBaseSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) CreatePlatformSettings(ctx context.Context, in *CreatePlatformSettingsReq, opts ...grpc.CallOption) (*CreatePlatformSettingsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePlatformSettingsResp)
	err := c.cc.Invoke(ctx, MerchantService_CreatePlatformSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) UpdatePlatformSettings(ctx context.Context, in *UpdatePlatformSettingsReq, opts ...grpc.CallOption) (*UpdatePlatformSettingsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePlatformSettingsResp)
	err := c.cc.Invoke(ctx, MerchantService_UpdatePlatformSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ListPlatformSettings(ctx context.Context, in *ListPlatformSettingsReq, opts ...grpc.CallOption) (*ListPlatformSettingsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPlatformSettingsResp)
	err := c.cc.Invoke(ctx, MerchantService_ListPlatformSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) CreateDomainSettings(ctx context.Context, in *CreateDomainSettingsReq, opts ...grpc.CallOption) (*CreateDomainSettingsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDomainSettingsResp)
	err := c.cc.Invoke(ctx, MerchantService_CreateDomainSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) UpdateDomainSettings(ctx context.Context, in *UpdateDomainSettingsReq, opts ...grpc.CallOption) (*UpdateDomainSettingsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDomainSettingsResp)
	err := c.cc.Invoke(ctx, MerchantService_UpdateDomainSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ListDomainSettings(ctx context.Context, in *ListDomainSettingsReq, opts ...grpc.CallOption) (*ListDomainSettingsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDomainSettingsResp)
	err := c.cc.Invoke(ctx, MerchantService_ListDomainSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetDomainSettings(ctx context.Context, in *GetDomainSettingsReq, opts ...grpc.CallOption) (*GetDomainSettingsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDomainSettingsResp)
	err := c.cc.Invoke(ctx, MerchantService_GetDomainSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) CreateSecuritySettings(ctx context.Context, in *CreateSecuritySettingsReq, opts ...grpc.CallOption) (*CreateSecuritySettingsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSecuritySettingsResp)
	err := c.cc.Invoke(ctx, MerchantService_CreateSecuritySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) UpdateSecuritySettings(ctx context.Context, in *UpdateSecuritySettingsReq, opts ...grpc.CallOption) (*UpdateSecuritySettingsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSecuritySettingsResp)
	err := c.cc.Invoke(ctx, MerchantService_UpdateSecuritySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ListSecuritySettings(ctx context.Context, in *ListSecuritySettingsReq, opts ...grpc.CallOption) (*ListSecuritySettingsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSecuritySettingsResp)
	err := c.cc.Invoke(ctx, MerchantService_ListSecuritySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) CreateAccessSettings(ctx context.Context, in *CreateAccessSettingsReq, opts ...grpc.CallOption) (*CreateAccessSettingsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccessSettingsResp)
	err := c.cc.Invoke(ctx, MerchantService_CreateAccessSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) UpdateAccessSettings(ctx context.Context, in *UpdateAccessSettingsReq, opts ...grpc.CallOption) (*UpdateAccessSettingsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAccessSettingsResp)
	err := c.cc.Invoke(ctx, MerchantService_UpdateAccessSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ListAccessSettings(ctx context.Context, in *ListAccessSettingsReq, opts ...grpc.CallOption) (*ListAccessSettingsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccessSettingsResp)
	err := c.cc.Invoke(ctx, MerchantService_ListAccessSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) CreateGameSettings(ctx context.Context, in *CreateGameSettingsReq, opts ...grpc.CallOption) (*CreateGameSettingsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGameSettingsResp)
	err := c.cc.Invoke(ctx, MerchantService_CreateGameSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) UpdateGameSettings(ctx context.Context, in *UpdateGameSettingsReq, opts ...grpc.CallOption) (*UpdateGameSettingsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGameSettingsResp)
	err := c.cc.Invoke(ctx, MerchantService_UpdateGameSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ListGameSettings(ctx context.Context, in *ListGameSettingsReq, opts ...grpc.CallOption) (*ListGameSettingsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGameSettingsResp)
	err := c.cc.Invoke(ctx, MerchantService_ListGameSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) CreateAgent(ctx context.Context, in *CreateAgentReq, opts ...grpc.CallOption) (*CreateAgentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAgentResp)
	err := c.cc.Invoke(ctx, MerchantService_CreateAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) UpdateAgent(ctx context.Context, in *UpdateAgentReq, opts ...grpc.CallOption) (*UpdateAgentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAgentResp)
	err := c.cc.Invoke(ctx, MerchantService_UpdateAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ListAgent(ctx context.Context, in *ListAgentReq, opts ...grpc.CallOption) (*ListAgentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentResp)
	err := c.cc.Invoke(ctx, MerchantService_ListAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetAgent(ctx context.Context, in *GetAgentReq, opts ...grpc.CallOption) (*GetAgentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentResp)
	err := c.cc.Invoke(ctx, MerchantService_GetAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetAgentByInviteCode(ctx context.Context, in *GetAgentByInviteCodeReq, opts ...grpc.CallOption) (*GetAgentByInviteCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentByInviteCodeResp)
	err := c.cc.Invoke(ctx, MerchantService_GetAgentByInviteCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) CreateAgentDividend(ctx context.Context, in *CreateAgentDividendReq, opts ...grpc.CallOption) (*CreateAgentDividendResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAgentDividendResp)
	err := c.cc.Invoke(ctx, MerchantService_CreateAgentDividend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) UpdateAgentDividend(ctx context.Context, in *UpdateAgentDividendReq, opts ...grpc.CallOption) (*UpdateAgentDividendResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAgentDividendResp)
	err := c.cc.Invoke(ctx, MerchantService_UpdateAgentDividend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ListAgentDividend(ctx context.Context, in *ListAgentDividendReq, opts ...grpc.CallOption) (*ListAgentDividendResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentDividendResp)
	err := c.cc.Invoke(ctx, MerchantService_ListAgentDividend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetAgentDividend(ctx context.Context, in *GetAgentDividendReq, opts ...grpc.CallOption) (*GetAgentDividendResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentDividendResp)
	err := c.cc.Invoke(ctx, MerchantService_GetAgentDividend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) CreateAgentSettlement(ctx context.Context, in *CreateAgentSettlementReq, opts ...grpc.CallOption) (*CreateAgentSettlementResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAgentSettlementResp)
	err := c.cc.Invoke(ctx, MerchantService_CreateAgentSettlement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) UpdateAgentSettlement(ctx context.Context, in *UpdateAgentSettlementReq, opts ...grpc.CallOption) (*UpdateAgentSettlementResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAgentSettlementResp)
	err := c.cc.Invoke(ctx, MerchantService_UpdateAgentSettlement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ListAgentSettlement(ctx context.Context, in *ListAgentSettlementReq, opts ...grpc.CallOption) (*ListAgentSettlementResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentSettlementResp)
	err := c.cc.Invoke(ctx, MerchantService_ListAgentSettlement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetAgentSettlement(ctx context.Context, in *GetAgentSettlementReq, opts ...grpc.CallOption) (*GetAgentSettlementResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAgentSettlementResp)
	err := c.cc.Invoke(ctx, MerchantService_GetAgentSettlement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) AgentMemberMigration(ctx context.Context, in *MemberMigrationReq, opts ...grpc.CallOption) (*MemberMigrationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberMigrationResp)
	err := c.cc.Invoke(ctx, MerchantService_AgentMemberMigration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ListAgentMemberMigrationRecord(ctx context.Context, in *MemberMigrationListReq, opts ...grpc.CallOption) (*MemberMigrationListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberMigrationListResp)
	err := c.cc.Invoke(ctx, MerchantService_ListAgentMemberMigrationRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantServiceServer is the server API for MerchantService service.
// All implementations must embed UnimplementedMerchantServiceServer
// for forward compatibility.
type MerchantServiceServer interface {
	// 创建商户
	CreateMerchant(context.Context, *CreateMerchantReq) (*MerchantResp, error)
	// 更新商户
	UpdateMerchant(context.Context, *UpdateMerchantReq) (*MerchantResp, error)
	// 激活商户
	ActivateMerchant(context.Context, *ActivateMerchantReq) (*ActivateMerchantResp, error)
	// 停用商户
	InactivateMerchant(context.Context, *InactivateMerchantReq) (*InactivateMerchantResp, error)
	// 更新商户状态
	UpdateMerchantStatus(context.Context, *UpdateMerchantStatusReq) (*MerchantResp, error)
	// 获取商户
	GetMerchant(context.Context, *GetMerchantReq) (*MerchantResp, error)
	// 获取商户列表
	ListMerchant(context.Context, *MerchantListReq) (*MerchantListResp, error)
	// 分页获取商户列表
	PageMerchant(context.Context, *PageMerchantReq) (*MerchantListResp, error)
	GetMerchantByDomain(context.Context, *GetMerchantByDomainReq) (*GetMerchantByDomainResp, error)
	// 创建商户基础设置
	CreateMerchantBaseSettings(context.Context, *CreateMerchantBaseSettingsReq) (*CreateMerchantBaseSettingsResp, error)
	// 获取商户基础设置
	GetMerchantBaseSettings(context.Context, *GetMerchantBaseSettingsReq) (*GetMerchantBaseSettingsResp, error)
	// 创建平台设置
	CreatePlatformSettings(context.Context, *CreatePlatformSettingsReq) (*CreatePlatformSettingsResp, error)
	// 更新平台设置
	UpdatePlatformSettings(context.Context, *UpdatePlatformSettingsReq) (*UpdatePlatformSettingsResp, error)
	// 获取平台设置列表
	ListPlatformSettings(context.Context, *ListPlatformSettingsReq) (*ListPlatformSettingsResp, error)
	// 创建域名设置
	CreateDomainSettings(context.Context, *CreateDomainSettingsReq) (*CreateDomainSettingsResp, error)
	// 更新域名设置
	UpdateDomainSettings(context.Context, *UpdateDomainSettingsReq) (*UpdateDomainSettingsResp, error)
	// 获取域名设置列表
	ListDomainSettings(context.Context, *ListDomainSettingsReq) (*ListDomainSettingsResp, error)
	GetDomainSettings(context.Context, *GetDomainSettingsReq) (*GetDomainSettingsResp, error)
	// 创建安全设置
	CreateSecuritySettings(context.Context, *CreateSecuritySettingsReq) (*CreateSecuritySettingsResp, error)
	// 更新安全设置
	UpdateSecuritySettings(context.Context, *UpdateSecuritySettingsReq) (*UpdateSecuritySettingsResp, error)
	// 获取安全设置列表
	ListSecuritySettings(context.Context, *ListSecuritySettingsReq) (*ListSecuritySettingsResp, error)
	// 创建访问控制
	CreateAccessSettings(context.Context, *CreateAccessSettingsReq) (*CreateAccessSettingsResp, error)
	// 更新访问控制
	UpdateAccessSettings(context.Context, *UpdateAccessSettingsReq) (*UpdateAccessSettingsResp, error)
	// 获取访问控制列表
	ListAccessSettings(context.Context, *ListAccessSettingsReq) (*ListAccessSettingsResp, error)
	// 创建产品设置
	CreateGameSettings(context.Context, *CreateGameSettingsReq) (*CreateGameSettingsResp, error)
	// 更新产品设置
	UpdateGameSettings(context.Context, *UpdateGameSettingsReq) (*UpdateGameSettingsResp, error)
	// 获取产品设置列表
	ListGameSettings(context.Context, *ListGameSettingsReq) (*ListGameSettingsResp, error)
	// 代理基本信息
	CreateAgent(context.Context, *CreateAgentReq) (*CreateAgentResp, error)
	// 更新代理基本信息
	UpdateAgent(context.Context, *UpdateAgentReq) (*UpdateAgentResp, error)
	// 获取代理列表
	ListAgent(context.Context, *ListAgentReq) (*ListAgentResp, error)
	// 获取代理
	GetAgent(context.Context, *GetAgentReq) (*GetAgentResp, error)
	// 获取代理邀请码
	GetAgentByInviteCode(context.Context, *GetAgentByInviteCodeReq) (*GetAgentByInviteCodeResp, error)
	// 代理分红模式
	CreateAgentDividend(context.Context, *CreateAgentDividendReq) (*CreateAgentDividendResp, error)
	// 更新代理分红模式
	UpdateAgentDividend(context.Context, *UpdateAgentDividendReq) (*UpdateAgentDividendResp, error)
	// 获取代理分红模式列表
	ListAgentDividend(context.Context, *ListAgentDividendReq) (*ListAgentDividendResp, error)
	// 获取代理分红模式
	GetAgentDividend(context.Context, *GetAgentDividendReq) (*GetAgentDividendResp, error)
	// 代理结算模式
	CreateAgentSettlement(context.Context, *CreateAgentSettlementReq) (*CreateAgentSettlementResp, error)
	// 更新代理结算模式
	UpdateAgentSettlement(context.Context, *UpdateAgentSettlementReq) (*UpdateAgentSettlementResp, error)
	// 获取代理结算模式列表
	ListAgentSettlement(context.Context, *ListAgentSettlementReq) (*ListAgentSettlementResp, error)
	// 获取代理结算模式
	GetAgentSettlement(context.Context, *GetAgentSettlementReq) (*GetAgentSettlementResp, error)
	// 代理会员迁移
	AgentMemberMigration(context.Context, *MemberMigrationReq) (*MemberMigrationResp, error)
	// 获取代理会员迁移记录列表
	ListAgentMemberMigrationRecord(context.Context, *MemberMigrationListReq) (*MemberMigrationListResp, error)
	mustEmbedUnimplementedMerchantServiceServer()
}

// UnimplementedMerchantServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantServiceServer struct{}

func (UnimplementedMerchantServiceServer) CreateMerchant(context.Context, *CreateMerchantReq) (*MerchantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) UpdateMerchant(context.Context, *UpdateMerchantReq) (*MerchantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) ActivateMerchant(context.Context, *ActivateMerchantReq) (*ActivateMerchantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) InactivateMerchant(context.Context, *InactivateMerchantReq) (*InactivateMerchantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InactivateMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) UpdateMerchantStatus(context.Context, *UpdateMerchantStatusReq) (*MerchantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMerchantStatus not implemented")
}
func (UnimplementedMerchantServiceServer) GetMerchant(context.Context, *GetMerchantReq) (*MerchantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) ListMerchant(context.Context, *MerchantListReq) (*MerchantListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) PageMerchant(context.Context, *PageMerchantReq) (*MerchantListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) GetMerchantByDomain(context.Context, *GetMerchantByDomainReq) (*GetMerchantByDomainResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantByDomain not implemented")
}
func (UnimplementedMerchantServiceServer) CreateMerchantBaseSettings(context.Context, *CreateMerchantBaseSettingsReq) (*CreateMerchantBaseSettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMerchantBaseSettings not implemented")
}
func (UnimplementedMerchantServiceServer) GetMerchantBaseSettings(context.Context, *GetMerchantBaseSettingsReq) (*GetMerchantBaseSettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantBaseSettings not implemented")
}
func (UnimplementedMerchantServiceServer) CreatePlatformSettings(context.Context, *CreatePlatformSettingsReq) (*CreatePlatformSettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlatformSettings not implemented")
}
func (UnimplementedMerchantServiceServer) UpdatePlatformSettings(context.Context, *UpdatePlatformSettingsReq) (*UpdatePlatformSettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlatformSettings not implemented")
}
func (UnimplementedMerchantServiceServer) ListPlatformSettings(context.Context, *ListPlatformSettingsReq) (*ListPlatformSettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlatformSettings not implemented")
}
func (UnimplementedMerchantServiceServer) CreateDomainSettings(context.Context, *CreateDomainSettingsReq) (*CreateDomainSettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDomainSettings not implemented")
}
func (UnimplementedMerchantServiceServer) UpdateDomainSettings(context.Context, *UpdateDomainSettingsReq) (*UpdateDomainSettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDomainSettings not implemented")
}
func (UnimplementedMerchantServiceServer) ListDomainSettings(context.Context, *ListDomainSettingsReq) (*ListDomainSettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomainSettings not implemented")
}
func (UnimplementedMerchantServiceServer) GetDomainSettings(context.Context, *GetDomainSettingsReq) (*GetDomainSettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainSettings not implemented")
}
func (UnimplementedMerchantServiceServer) CreateSecuritySettings(context.Context, *CreateSecuritySettingsReq) (*CreateSecuritySettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecuritySettings not implemented")
}
func (UnimplementedMerchantServiceServer) UpdateSecuritySettings(context.Context, *UpdateSecuritySettingsReq) (*UpdateSecuritySettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecuritySettings not implemented")
}
func (UnimplementedMerchantServiceServer) ListSecuritySettings(context.Context, *ListSecuritySettingsReq) (*ListSecuritySettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecuritySettings not implemented")
}
func (UnimplementedMerchantServiceServer) CreateAccessSettings(context.Context, *CreateAccessSettingsReq) (*CreateAccessSettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessSettings not implemented")
}
func (UnimplementedMerchantServiceServer) UpdateAccessSettings(context.Context, *UpdateAccessSettingsReq) (*UpdateAccessSettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccessSettings not implemented")
}
func (UnimplementedMerchantServiceServer) ListAccessSettings(context.Context, *ListAccessSettingsReq) (*ListAccessSettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessSettings not implemented")
}
func (UnimplementedMerchantServiceServer) CreateGameSettings(context.Context, *CreateGameSettingsReq) (*CreateGameSettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGameSettings not implemented")
}
func (UnimplementedMerchantServiceServer) UpdateGameSettings(context.Context, *UpdateGameSettingsReq) (*UpdateGameSettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameSettings not implemented")
}
func (UnimplementedMerchantServiceServer) ListGameSettings(context.Context, *ListGameSettingsReq) (*ListGameSettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGameSettings not implemented")
}
func (UnimplementedMerchantServiceServer) CreateAgent(context.Context, *CreateAgentReq) (*CreateAgentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgent not implemented")
}
func (UnimplementedMerchantServiceServer) UpdateAgent(context.Context, *UpdateAgentReq) (*UpdateAgentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgent not implemented")
}
func (UnimplementedMerchantServiceServer) ListAgent(context.Context, *ListAgentReq) (*ListAgentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgent not implemented")
}
func (UnimplementedMerchantServiceServer) GetAgent(context.Context, *GetAgentReq) (*GetAgentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgent not implemented")
}
func (UnimplementedMerchantServiceServer) GetAgentByInviteCode(context.Context, *GetAgentByInviteCodeReq) (*GetAgentByInviteCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentByInviteCode not implemented")
}
func (UnimplementedMerchantServiceServer) CreateAgentDividend(context.Context, *CreateAgentDividendReq) (*CreateAgentDividendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgentDividend not implemented")
}
func (UnimplementedMerchantServiceServer) UpdateAgentDividend(context.Context, *UpdateAgentDividendReq) (*UpdateAgentDividendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentDividend not implemented")
}
func (UnimplementedMerchantServiceServer) ListAgentDividend(context.Context, *ListAgentDividendReq) (*ListAgentDividendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentDividend not implemented")
}
func (UnimplementedMerchantServiceServer) GetAgentDividend(context.Context, *GetAgentDividendReq) (*GetAgentDividendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentDividend not implemented")
}
func (UnimplementedMerchantServiceServer) CreateAgentSettlement(context.Context, *CreateAgentSettlementReq) (*CreateAgentSettlementResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgentSettlement not implemented")
}
func (UnimplementedMerchantServiceServer) UpdateAgentSettlement(context.Context, *UpdateAgentSettlementReq) (*UpdateAgentSettlementResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentSettlement not implemented")
}
func (UnimplementedMerchantServiceServer) ListAgentSettlement(context.Context, *ListAgentSettlementReq) (*ListAgentSettlementResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentSettlement not implemented")
}
func (UnimplementedMerchantServiceServer) GetAgentSettlement(context.Context, *GetAgentSettlementReq) (*GetAgentSettlementResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentSettlement not implemented")
}
func (UnimplementedMerchantServiceServer) AgentMemberMigration(context.Context, *MemberMigrationReq) (*MemberMigrationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentMemberMigration not implemented")
}
func (UnimplementedMerchantServiceServer) ListAgentMemberMigrationRecord(context.Context, *MemberMigrationListReq) (*MemberMigrationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentMemberMigrationRecord not implemented")
}
func (UnimplementedMerchantServiceServer) mustEmbedUnimplementedMerchantServiceServer() {}
func (UnimplementedMerchantServiceServer) testEmbeddedByValue()                         {}

// UnsafeMerchantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantServiceServer will
// result in compilation errors.
type UnsafeMerchantServiceServer interface {
	mustEmbedUnimplementedMerchantServiceServer()
}

func RegisterMerchantServiceServer(s grpc.ServiceRegistrar, srv MerchantServiceServer) {
	// If the following call pancis, it indicates UnimplementedMerchantServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MerchantService_ServiceDesc, srv)
}

func _MerchantService_CreateMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMerchantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CreateMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_CreateMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CreateMerchant(ctx, req.(*CreateMerchantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_UpdateMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMerchantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).UpdateMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_UpdateMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).UpdateMerchant(ctx, req.(*UpdateMerchantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ActivateMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateMerchantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ActivateMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_ActivateMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ActivateMerchant(ctx, req.(*ActivateMerchantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_InactivateMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InactivateMerchantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).InactivateMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_InactivateMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).InactivateMerchant(ctx, req.(*InactivateMerchantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_UpdateMerchantStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMerchantStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).UpdateMerchantStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_UpdateMerchantStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).UpdateMerchantStatus(ctx, req.(*UpdateMerchantStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchant(ctx, req.(*GetMerchantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ListMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ListMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_ListMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ListMerchant(ctx, req.(*MerchantListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_PageMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageMerchantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).PageMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_PageMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).PageMerchant(ctx, req.(*PageMerchantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMerchantByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantByDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchantByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetMerchantByDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchantByDomain(ctx, req.(*GetMerchantByDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_CreateMerchantBaseSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMerchantBaseSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CreateMerchantBaseSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_CreateMerchantBaseSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CreateMerchantBaseSettings(ctx, req.(*CreateMerchantBaseSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMerchantBaseSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantBaseSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchantBaseSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetMerchantBaseSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchantBaseSettings(ctx, req.(*GetMerchantBaseSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_CreatePlatformSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlatformSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CreatePlatformSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_CreatePlatformSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CreatePlatformSettings(ctx, req.(*CreatePlatformSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_UpdatePlatformSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlatformSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).UpdatePlatformSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_UpdatePlatformSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).UpdatePlatformSettings(ctx, req.(*UpdatePlatformSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ListPlatformSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlatformSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ListPlatformSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_ListPlatformSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ListPlatformSettings(ctx, req.(*ListPlatformSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_CreateDomainSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CreateDomainSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_CreateDomainSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CreateDomainSettings(ctx, req.(*CreateDomainSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_UpdateDomainSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).UpdateDomainSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_UpdateDomainSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).UpdateDomainSettings(ctx, req.(*UpdateDomainSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ListDomainSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ListDomainSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_ListDomainSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ListDomainSettings(ctx, req.(*ListDomainSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetDomainSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetDomainSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetDomainSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetDomainSettings(ctx, req.(*GetDomainSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_CreateSecuritySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecuritySettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CreateSecuritySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_CreateSecuritySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CreateSecuritySettings(ctx, req.(*CreateSecuritySettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_UpdateSecuritySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecuritySettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).UpdateSecuritySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_UpdateSecuritySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).UpdateSecuritySettings(ctx, req.(*UpdateSecuritySettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ListSecuritySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecuritySettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ListSecuritySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_ListSecuritySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ListSecuritySettings(ctx, req.(*ListSecuritySettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_CreateAccessSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CreateAccessSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_CreateAccessSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CreateAccessSettings(ctx, req.(*CreateAccessSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_UpdateAccessSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccessSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).UpdateAccessSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_UpdateAccessSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).UpdateAccessSettings(ctx, req.(*UpdateAccessSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ListAccessSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ListAccessSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_ListAccessSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ListAccessSettings(ctx, req.(*ListAccessSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_CreateGameSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CreateGameSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_CreateGameSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CreateGameSettings(ctx, req.(*CreateGameSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_UpdateGameSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).UpdateGameSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_UpdateGameSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).UpdateGameSettings(ctx, req.(*UpdateGameSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ListGameSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ListGameSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_ListGameSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ListGameSettings(ctx, req.(*ListGameSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_CreateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CreateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_CreateAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CreateAgent(ctx, req.(*CreateAgentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_UpdateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).UpdateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_UpdateAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).UpdateAgent(ctx, req.(*UpdateAgentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ListAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ListAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_ListAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ListAgent(ctx, req.(*ListAgentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetAgent(ctx, req.(*GetAgentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetAgentByInviteCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentByInviteCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetAgentByInviteCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetAgentByInviteCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetAgentByInviteCode(ctx, req.(*GetAgentByInviteCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_CreateAgentDividend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentDividendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CreateAgentDividend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_CreateAgentDividend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CreateAgentDividend(ctx, req.(*CreateAgentDividendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_UpdateAgentDividend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentDividendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).UpdateAgentDividend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_UpdateAgentDividend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).UpdateAgentDividend(ctx, req.(*UpdateAgentDividendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ListAgentDividend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentDividendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ListAgentDividend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_ListAgentDividend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ListAgentDividend(ctx, req.(*ListAgentDividendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetAgentDividend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentDividendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetAgentDividend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetAgentDividend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetAgentDividend(ctx, req.(*GetAgentDividendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_CreateAgentSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentSettlementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CreateAgentSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_CreateAgentSettlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CreateAgentSettlement(ctx, req.(*CreateAgentSettlementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_UpdateAgentSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentSettlementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).UpdateAgentSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_UpdateAgentSettlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).UpdateAgentSettlement(ctx, req.(*UpdateAgentSettlementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ListAgentSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentSettlementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ListAgentSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_ListAgentSettlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ListAgentSettlement(ctx, req.(*ListAgentSettlementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetAgentSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentSettlementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetAgentSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetAgentSettlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetAgentSettlement(ctx, req.(*GetAgentSettlementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_AgentMemberMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberMigrationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).AgentMemberMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_AgentMemberMigration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).AgentMemberMigration(ctx, req.(*MemberMigrationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ListAgentMemberMigrationRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberMigrationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ListAgentMemberMigrationRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_ListAgentMemberMigrationRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ListAgentMemberMigrationRecord(ctx, req.(*MemberMigrationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantService_ServiceDesc is the grpc.ServiceDesc for MerchantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "merchant.MerchantService",
	HandlerType: (*MerchantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMerchant",
			Handler:    _MerchantService_CreateMerchant_Handler,
		},
		{
			MethodName: "UpdateMerchant",
			Handler:    _MerchantService_UpdateMerchant_Handler,
		},
		{
			MethodName: "ActivateMerchant",
			Handler:    _MerchantService_ActivateMerchant_Handler,
		},
		{
			MethodName: "InactivateMerchant",
			Handler:    _MerchantService_InactivateMerchant_Handler,
		},
		{
			MethodName: "UpdateMerchantStatus",
			Handler:    _MerchantService_UpdateMerchantStatus_Handler,
		},
		{
			MethodName: "GetMerchant",
			Handler:    _MerchantService_GetMerchant_Handler,
		},
		{
			MethodName: "ListMerchant",
			Handler:    _MerchantService_ListMerchant_Handler,
		},
		{
			MethodName: "PageMerchant",
			Handler:    _MerchantService_PageMerchant_Handler,
		},
		{
			MethodName: "GetMerchantByDomain",
			Handler:    _MerchantService_GetMerchantByDomain_Handler,
		},
		{
			MethodName: "CreateMerchantBaseSettings",
			Handler:    _MerchantService_CreateMerchantBaseSettings_Handler,
		},
		{
			MethodName: "GetMerchantBaseSettings",
			Handler:    _MerchantService_GetMerchantBaseSettings_Handler,
		},
		{
			MethodName: "CreatePlatformSettings",
			Handler:    _MerchantService_CreatePlatformSettings_Handler,
		},
		{
			MethodName: "UpdatePlatformSettings",
			Handler:    _MerchantService_UpdatePlatformSettings_Handler,
		},
		{
			MethodName: "ListPlatformSettings",
			Handler:    _MerchantService_ListPlatformSettings_Handler,
		},
		{
			MethodName: "CreateDomainSettings",
			Handler:    _MerchantService_CreateDomainSettings_Handler,
		},
		{
			MethodName: "UpdateDomainSettings",
			Handler:    _MerchantService_UpdateDomainSettings_Handler,
		},
		{
			MethodName: "ListDomainSettings",
			Handler:    _MerchantService_ListDomainSettings_Handler,
		},
		{
			MethodName: "GetDomainSettings",
			Handler:    _MerchantService_GetDomainSettings_Handler,
		},
		{
			MethodName: "CreateSecuritySettings",
			Handler:    _MerchantService_CreateSecuritySettings_Handler,
		},
		{
			MethodName: "UpdateSecuritySettings",
			Handler:    _MerchantService_UpdateSecuritySettings_Handler,
		},
		{
			MethodName: "ListSecuritySettings",
			Handler:    _MerchantService_ListSecuritySettings_Handler,
		},
		{
			MethodName: "CreateAccessSettings",
			Handler:    _MerchantService_CreateAccessSettings_Handler,
		},
		{
			MethodName: "UpdateAccessSettings",
			Handler:    _MerchantService_UpdateAccessSettings_Handler,
		},
		{
			MethodName: "ListAccessSettings",
			Handler:    _MerchantService_ListAccessSettings_Handler,
		},
		{
			MethodName: "CreateGameSettings",
			Handler:    _MerchantService_CreateGameSettings_Handler,
		},
		{
			MethodName: "UpdateGameSettings",
			Handler:    _MerchantService_UpdateGameSettings_Handler,
		},
		{
			MethodName: "ListGameSettings",
			Handler:    _MerchantService_ListGameSettings_Handler,
		},
		{
			MethodName: "CreateAgent",
			Handler:    _MerchantService_CreateAgent_Handler,
		},
		{
			MethodName: "UpdateAgent",
			Handler:    _MerchantService_UpdateAgent_Handler,
		},
		{
			MethodName: "ListAgent",
			Handler:    _MerchantService_ListAgent_Handler,
		},
		{
			MethodName: "GetAgent",
			Handler:    _MerchantService_GetAgent_Handler,
		},
		{
			MethodName: "GetAgentByInviteCode",
			Handler:    _MerchantService_GetAgentByInviteCode_Handler,
		},
		{
			MethodName: "CreateAgentDividend",
			Handler:    _MerchantService_CreateAgentDividend_Handler,
		},
		{
			MethodName: "UpdateAgentDividend",
			Handler:    _MerchantService_UpdateAgentDividend_Handler,
		},
		{
			MethodName: "ListAgentDividend",
			Handler:    _MerchantService_ListAgentDividend_Handler,
		},
		{
			MethodName: "GetAgentDividend",
			Handler:    _MerchantService_GetAgentDividend_Handler,
		},
		{
			MethodName: "CreateAgentSettlement",
			Handler:    _MerchantService_CreateAgentSettlement_Handler,
		},
		{
			MethodName: "UpdateAgentSettlement",
			Handler:    _MerchantService_UpdateAgentSettlement_Handler,
		},
		{
			MethodName: "ListAgentSettlement",
			Handler:    _MerchantService_ListAgentSettlement_Handler,
		},
		{
			MethodName: "GetAgentSettlement",
			Handler:    _MerchantService_GetAgentSettlement_Handler,
		},
		{
			MethodName: "AgentMemberMigration",
			Handler:    _MerchantService_AgentMemberMigration_Handler,
		},
		{
			MethodName: "ListAgentMemberMigrationRecord",
			Handler:    _MerchantService_ListAgentMemberMigrationRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant.proto",
}
